name: CI/CD - Expensy App

on:
  push:
    branches: [ main ]
    paths:
      - 'expensy_backend/**'
      - 'expensy_frontend/**'
      - 'k8s/**'
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME_BACKEND: 160180/devopsexpensy_backend:latest
  IMAGE_NAME_FRONTEND: 160180/expensy_frontend:v1.0.0
  K8S_NAMESPACE: devops-expensy

jobs:
  # CI PHASE: Build, Test and Push Images
  ci-phase:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # Backend Build and Test
    - name: Build Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./expensy_backend
        tags: |
          ${{ env.IMAGE_NAME_BACKEND }}:latest
          ${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Backend tests
      run: |
        docker run --rm ${{ env.IMAGE_NAME_BACKEND }}:latest npm test --if-present

    # Frontend Build and Test  
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./expensy_frontend
        tags: |
          ${{ env.IMAGE_NAME_FRONTEND }}:latest
          ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Frontend tests
      run: |
        docker run --rm ${{ env.IMAGE_NAME_FRONTEND }}:latest npm test --if-present

    # Push images to Docker Hub
    - name: Push Backend to Docker Hub
      run: |
        docker push ${{ env.IMAGE_NAME_BACKEND }}:latest
        docker push ${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

    - name: Push Frontend to Docker Hub
      run: |
        docker push ${{ env.IMAGE_NAME_FRONTEND }}:latest
        docker push ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}

  # CD PHASE: Deploy to Kubernetes (only on main branch)
  cd-phase:
    runs-on: ubuntu-latest
    needs: ci-phase
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up K8s context
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Update image tags in manifests
      run: |
        # Update backend image tag
        sed -i "s|image:.*backend.*|image: ${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|" k8s/backend-deployment.yaml
        
        # Update frontend image tag  
        sed -i "s|image:.*frontend.*|image: ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|" k8s/frontend-deployment.yaml
        
        echo "Updated image tags:"
        grep "image:" k8s/*deployment.yaml

    - name: Apply K8s manifests
      run: |
        kubectl apply -f k8s/ -n ${{ env.K8S_NAMESPACE }}

    - name: Verify backend rollout
      run: |
        kubectl rollout status deployment/backend-pod -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Verify frontend rollout
      run: |
        kubectl rollout status deployment/frontend-pod -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Verify services
      run: |
        kubectl get pods -n ${{ env.K8S_NAMESPACE }}
        kubectl get services -n ${{ env.K8S_NAMESPACE }}
        kubectl get ingress -n ${{ env.K8S_NAMESPACE }}

    - name: Health check
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=backend -n ${{ env.K8S_NAMESPACE }} --timeout=180s
        kubectl wait --for=condition=ready pod -l app=frontend -n ${{ env.K8S_NAMESPACE }} --timeout=180s
        echo "âœ… All pods are ready!"