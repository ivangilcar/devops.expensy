name: CI/CD | Expensy App

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME_BACKEND: 160180/devopsexpensy_backend
  IMAGE_NAME_FRONTEND: 160180/expensy_frontend
  K8S_NAMESPACE: devops-expensy

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Backend Build - Diogo Test
    - name: Install backend dependencies
      run: |
        cd expensy_backend
        npm ci --only=production

    # Frontend Build
    - name: Install frontend dependencies
      run: |
        cd expensy_frontend
        npm ci --only=production

  # test:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Install backend dev dependencies
  #     run: |
  #       cd expensy_backend
  #       npm ci

  #   - name: Run backend tests
  #     run: |
  #       cd expensy_backend
  #       npm test --if-present

  #   - name: Install frontend dev dependencies
  #     run: |
  #       cd expensy_frontend
  #       npm ci

  #   - name: Run frontend tests
  #     run: |
  #       cd expensy_frontend
  #       npm test --if-present

  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      backend_tag: ${{ steps.meta.outputs.backend_tag }}
      frontend_tag: ${{ steps.meta.outputs.frontend_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Define image tags
      id: meta
      run: |
        echo "backend_tag=${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "frontend_tag=${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Build & Push Backend
      run: |
        docker build -t ${{ steps.meta.outputs.backend_tag }} -t ${{ env.IMAGE_NAME_BACKEND }}:latest ./expensy_backend
        docker push ${{ steps.meta.outputs.backend_tag }}
        docker push ${{ env.IMAGE_NAME_BACKEND }}:latest

    - name: Build & Push Frontend
      run: |
        docker build -t ${{ steps.meta.outputs.frontend_tag }} -t ${{ env.IMAGE_NAME_FRONTEND }}:latest ./expensy_frontend
        docker push ${{ steps.meta.outputs.frontend_tag }}
        docker push ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure AKS context
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy Backend
      run: |
        kubectl set image deployment/backend-deployment backend=${{ needs.docker.outputs.backend_tag }} -n ${{ env.K8S_NAMESPACE }}
        kubectl rollout status deployment/backend-deployment -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Deploy Frontend
      run: |
        kubectl set image deployment/backend-deployment backend=${{ needs.docker.outputs.backend_tag }} -n ${{ env.K8S_NAMESPACE }}
        kubectl rollout status deployment/frontend-deployment -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Verify services & ingress
      run: |
        kubectl get pods,svc,ingress -n ${{ env.K8S_NAMESPACE }}

    - name: Create namespace if not exists
      run: |
        kubectl get namespace ${{ env.K8S_NAMESPACE }} || kubectl create namespace ${{ env.K8S_NAMESPACE }}

    - name: Deploy all Kubernetes manifests
      run: |
        # Apply all manifests in order (namespace first, then others)
        kubectl apply -f K8s/namespace.yaml
        kubectl apply -f K8s/mongo-deployment.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/mongo-service.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/redis-deployment.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/redis-service.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/backend-deployment.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/backend-service.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/frontend-deployment.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/frontend-service.yaml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f K8s/expensy-ingress.yaml -n ${{ env.K8S_NAMESPACE }}

    - name: Wait for deployments to be ready
      run: |
        kubectl rollout status deployment/mongo-deployment -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/redis-deployment -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/backend-deployment -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Verify all resources
      run: |
        kubectl get all -n ${{ env.K8S_NAMESPACE }}
        kubectl get ingress -n ${{ env.K8S_NAMESPACE }}

    # - name: Health check
    #   run: |
    #     sleep 30
    #     curl -f http://expensy.ivanp3.com/ || exit 1
    #     echo "Deployment successful!"